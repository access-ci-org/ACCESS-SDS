Use Case: JUnit is a unit testing framework for Java programming language. It plays a critical role in test-driven development and is a part of a family of unit testing frameworks which are collectively known as xUnit frameworks. So it's used extensively in the software development industry.

Code details and examples:
Code:
In order to use JUnit, you need a test class and you also need to import JUnit packages. Below is an example of a simple test class.

```java
import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class TestJunit {
   @Test
   public void testAdd() {
      String str = "JUnit setup correctly";
      assertEquals("JUnit setup correctly",str);
   }
}
```
In this example, we import org.junit.Test, which provides the @Test annotation. This annotation signals to JUnit that the public void method it's attached to can be run as a test case.

We also import static org.junit.Assert.assertEquals. The assertEquals method is a statically imported method, which comes from the org.junit.Assert class. It's used to assert that two primitives/objects are equal or the same.

Since JUnit is a framework, you would generally use it as an integrated tool within a Java IDE like Eclipse. However, you can also use it from the command line.

To compile the code:

```sh
javac -cp /path/to/junit-4.12.jar TestJunit.java
```

To run the tests:

```sh
java -cp /path/to/junit-4.12.jar:/path/to/hamcrest-core-1.3.jar org.junit.runner.JUnitCore TestJunit
```

Replace /path/to with the actual path locations of JUnit and Hamcrest jars. The test methods should be annotated with @Test annotations and if everything else is correct, the tests will run successfully. If there are any test failures, JUnit will print them to the console.