Use Case: Use Keras for building and training a machine learning model to recognize handwritten digits.

Code details and examples: Code 

```python
# Import necessary libraries
from keras.datasets import mnist
from keras.models import Sequential
from keras.layers import Dense
from keras.utils import to_categorical 

# Load the dataset
(train_images, train_labels), (test_images, test_labels) = mnist.load_data()

# Preprocess the data
train_images = (train_images / 255) - 0.5
test_images = (test_images / 255) - 0.5

# Flatten the images
train_images = train_images.reshape((-1, 784))
test_images = test_images.reshape((-1, 784))

# Build the model
model = Sequential([
  Dense(64, activation='relu', input_shape=(784,)),
  Dense(64, activation='relu'),
  Dense(10, activation='softmax'),
])

# Compile the model
model.compile(
  optimizer='adam',
  loss='categorical_crossentropy',
  metrics=['accuracy'],
)

# Train the model
model.fit(
  train_images,
  to_categorical(train_labels),
  epochs=5,
  batch_size=32,
)

# Evaluate it on the test set
loss, acc = model.evaluate(
  test_images,
  to_categorical(test_labels)
)
print('Test loss: ', loss)
print('Test accuracy: ', acc)
```

The abovementioned code for running a deep learning model in Keras uses the MNIST dataset of handwritten digits. The sample input here is the train_images and train_labels. The input image data is 3D: (number_of_images, image_height, image_width). The image data is normalized and reshaped before being fed into the model. The shape of the input to the model is specified in the input_shape argument in the first layer of the model. Apart from that, the input labels/array are one-hot encoded using to_categorical function. You may run this code in any Python IDE that has Keras and its dependencies installed. It will train the model for 5 epochs on the training set and then evaluates the modelâ€™s performance on the test set.