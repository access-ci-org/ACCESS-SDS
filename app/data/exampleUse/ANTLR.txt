Use Case: Use ANTLR (ANother Tool for Language Recognition) to generate a lexer, parser, and tree parser from a grammar that defines a programming language. This can be used, for example, to create new domain-specific languages or to parse existing ones.

Code details and examples: Code

1. Below is sample grammar in ANTLRv4 used to define a simple programming language called Tiny:

```antlr
grammar Tiny;

// parser rules
prog:   (stat)+ ;

stat:   expr NEWLINE                # printExpr
    |   ID '=' expr NEWLINE        # assign
    |   NEWLINE                    # newline
    ;

expr:   expr ('*'|'/') expr        # MultDiv
    |   expr ('+'|'-') expr        # AddSub
    |   INT                        # int
    |   ID                         # id
    |   '(' expr ')'               # parens
    ;

// lexer rules
ID : [a-z]+ ;
INT: [0-9]+ ;
NEWLINE : '\r'? '\n' ;
WS : [ \t]+ -> skip ;
```

In this grammar:

- '`prog`' represents a program, which is a series of statements.
- Each '`stat`' can be an expression followed by a newline, an assignment, or just a newline
- An '`expr`' can be a calculation, a number, a variable, or parentheses encompassing another expression.

2. To generate Java classes for the lexer and parser defined by the above grammar, save the grammar in a file called Tiny.g4, and then execute the following command:

```
antlr4 Tiny.g4
```

3. To compile the generated Java classes, execute:

```
javac Tiny*.java
```

4. To run the parser on an input file, execute:

```
grun Tiny prog -guio input.tiny
```

Where `input.tiny` is a text file containing code in the Tiny language, and `-gui` instructs ANTLR to display a parse tree in a GUI window.