Use Case: gperftools is a collection of a high-performance multi-threaded malloc() implementation, plus some pretty nifty performance analysis tools useful for creating more robust applications. These tools can be helpful for developers to profile, visualize and understand multi-threaded programs.

Code details and examples: Code

For the Profiler, you attach it to your program by simply providing a unique file for it to write its profile to. 

```cpp
#include "profile.h"

int main() {
  ProfilerStart("my_program.prof");
  // Your code here...
  ProfilerStop();
  return 0;
}
```
To compile this program use g++ linker '-lprofiler' flag.

`g++ -lprofiler -o my_program my_program.cpp`

To run it: 

`./my_program`

To visualize the profile, you can use 'pprof'

`pprof --text my_program my_program.prof`

This will come up with a list of the hotspots in your program.

For the Heap-Checker, you can use the NoLeaks and Leak checking levels. NoLeaks can be done as follows:

```cpp
#include "heap-checker.h"

int main() {
  HeapLeakChecker checker("checker");
  new int[10];  // Leak some memory
  bool result = checker.NoLeaks();
  std::cout << "No leaks? " << (result ? "true" : "false") << std::endl;
  return 0;
}
```
To compile this program use g++ linker '-ltcmalloc' flag.

`g++ -ltcmalloc -o checker checker.cpp`

To run it: 

`./checker`

For Leak checking level:

`HEAPCHECK=normal ./checker` 

This will print the leaks in the program. 

For TCMalloc, it automatically replaces malloc, new, delete, etc. 

```cpp
#include "gperftools/tcmalloc.h"

int main() {
  char* buf = new char[1024];
  delete[] buf;
  return 0;
}
```
To compile this program use g++ linker '-ltcmalloc' flag.

`g++ -ltcmalloc -o tc_program tc_program.cpp`

To run it: 

`./tc_program` 

TCMalloc will produce a more detailed heap profile which can be obtained by, 

`pprof --text tc_program /tmp/tcmalloc.heap` 

This will produce a profile of the heap usage of your program.