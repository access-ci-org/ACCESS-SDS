Use Case: MPFR library for high-precision arithmetic computations. Typically used for performing extensive floating-point arithmetic with guaranteed precision. 

Code details and examples:

Code:

```cpp
#include <stdio.h>
#include <mpfr.h>

int main()
{
    mpfr_t pi;
    mpfr_init2 (pi, 1000);
    mpfr_const_pi (pi, MPFR_RNDN);
    mpfr_printf ("Pi is approximately %.1000Rf\n", pi);
    mpfr_clear (pi);
    return 0;
}
```

This sample code calculates the value of pi up to 1000 decimal places using MPFR.

For MPFR, gcc supports it directly, so you can compile and run the code using the following commands:

Compile the MPFR code:
```bash
gcc -o pi mpfr_sample.c -lmpfr
```
Run the compiled executable:
```bash
./pi
``` 

In this code "mpfr_init2" initializes the variable and assign it a precision, "mpfr_const_pi" computes the value of Pi for the given precision and rounding mode, and "mpfr_printf" prints the value. After computations are done, the memory is freed by "mpfr_clear". Here, no input file is required as this is a stand alone program.