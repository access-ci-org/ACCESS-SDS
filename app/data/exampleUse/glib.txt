Use Case: Programs written in C frequently use glib for tasks such as memory allocation and thread manipulation.

Code details and examples:

Code:

```c
#include <glib.h>

int main() {
    GList* list = NULL;
    list = g_list_append(list, "Hello world");
    printf("The first item is '%s'\n", g_list_first(list)->data);
    return 0;
}
```

The GList data structure provided by glib is a doubly-linked list that can hold arbitrary data objects. In this code, it is used to hold a string.

Each node in the list contains a pointer to the previous node, a pointer to the next node, and a pointer to the data it contains. This structure allows for efficient addition and removal of nodes at both the start and end of the list.

To compile and run this code in a Linux environment, use the gcc compiler with the pkg-config command to specify the necessary compiler flags:

Command to run the code:

```bash
gcc `pkg-config --cflags --libs glib-2.0` main.c -o main
./main
```

This will print "The first item is 'Hello world'" to the terminal.