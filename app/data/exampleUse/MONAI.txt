Use Case: Use MONAI to perform 3D medical image segmentation. 

Code details and examples: Code

Firstly, import required libraries

```python
import monai
from monai.data import Dataset, DataLoader
from monai.networks.nets import UNet
from monai.transforms import (
    LoadImage, AddChannel, ScaleIntensity, 
    ToTensor, Compose
)
import torch
```

Then create input files and specify their format:

Input files:
```python
images = [
    '/path/to/image1.nii.gz',
    '/path/to/image2.nii.gz',
    '/path/to/image3.nii.gz',
]
seg_labels = [
    '/path/to/label1.nii.gz',
    '/path/to/label2.nii.gz',
    '/path/to/label3.nii.gz',
]
data = [{'image': im, 'label': lb} for im, lb in zip(images, seg_labels)]
```
where '/path/to/image#.nii.gz' is the path to the image file and '/path/to/label#.nii.gz' is the path to the corresponding label file. They are in Nifti (.nii) format.

Transforms and DataLoader:
```python
transforms = Compose([
    LoadImage(image_only=True),
    AddChannel(),
    ScaleIntensity(),
    ToTensor()
])

ds = Dataset(data, transforms)
loader = DataLoader(ds, batch_size=2, num_workers=2)
```

Create UNet model, loss function and optimizer:
```python
device = torch.device('cuda:0')
model = UNet(
    dimensions=3, 
    in_channels=1, 
    out_channels=1, 
    channels=(16, 32, 64, 128, 256),
    strides=(2, 2, 2, 2)
).to(device)

loss_function = torch.nn.BCEWithLogitsLoss()
optimizer = torch.optim.Adam(model.parameters(), 1e-4)
```

Training Process:
```python
max_epochs = 600
for epoch in range(max_epochs):
    print(f'Epoch {epoch + 1}/{max_epochs}')
    model.train()
    epoch_loss = 0
    step = 0
    for batch in loader:
        step += 1
        inputs, labels = batch['image'].to(device), batch['label'].to(device)
        optimizer.zero_grad()
        outputs = model(inputs)
        loss = loss_function(outputs, labels)
        loss.backward()
        optimizer.step()
        epoch_loss += loss.item()
    epoch_loss /= step
    print(f'epoch {epoch + 1} average loss: {epoch_loss:4f}')
``` 