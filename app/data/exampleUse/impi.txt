Use Case: Calculating π using the Leibniz formula. 

Code details and examples: 

Code:

```C
#include <mpi.h>
#include <stdio.h>

int main(int argc, char** argv) {
    MPI_Init(NULL, NULL);
    int world_size;
    MPI_Comm_size(MPI_COMM_WORLD, &world_size);
    int world_rank;
    MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);
    int N = 10000000;
    int start = world_rank * N/world_size;
    int end = (world_rank+1) * N/world_size;
    double sum = 0;
    for (int i=start; i<end; i++) {
        sum += (i%2==0 ? 1 : -1) / (2.0*i+1.0);
    }
    double total_sum;
    MPI_Reduce(&sum, &total_sum, 1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);
    if (world_rank == 0) {
        printf("Pi Approximation: %f\n", 4*total_sum);
    }
    MPI_Finalize();
}
```

Format of input files: No separate input file is required for running this program. 

Specifications: 
* This program uses the MPI_Reduce function to add up the partial sums calculated in all processes and stores the result in total_sum of the root process (0). 
* The Leibniz formula is implemented, which calculates π as the sum of an infinite series. 

Command to run the code: 

Compile the code with the mpicc compiler: 
```bash
mpicc calculate_pi.c -o calculate_pi
```

Run the compiled code using mpirun or mpiexec with the `-np` option to specify the number of processes:
```bash
mpirun -np 4 ./calculate_pi
```