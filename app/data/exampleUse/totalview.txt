Use Case: TotalView is a debugger used for multi-process, multi-threaded, high performance computing (HPC) applications. It can be used to debug serial, parallel (both MPI and OpenMP), and GPU-accelerated codes. It helps to inspect and manage variables, look at source code, set breakpoints, and control the execution of an application.

Code Details and Examples: Code

A sample for an MPI application in C language:

```c
#include <mpi.h>
#include <stdio.h>

int main(int argc, char** argv) {
    MPI_Init(NULL, NULL);
    int rank;
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    int world_size;
    MPI_Comm_size(MPI_COMM_WORLD, &world_size);
    char processor_name[MPI_MAX_PROCESSOR_NAME];
    int name_len;
    MPI_Get_processor_name(processor_name, &name_len);
    printf("Hello world from processor %s, rank %d out of %d processors\n", processor_name, rank, world_size);
    MPI_Finalize();
}
```

To run this MPI sample with the TotalView debugger use the following command:

```shell
mpirun -np 2 totalview ./a.out
```
With `-np 2` to specify the number of MPI's processes to be used.

TotalView then pops up a dialog asking if you want to stop at main, say Yes, then go to the Process window and set MPIR_being_debugged variable to 1. This allows the execution of processes to be synchronized with the debugger.