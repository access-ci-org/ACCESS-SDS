Use Case: Use MVAPICH2 (message passing interface for InfiniBand version 2) for running parallel programming applications in a cluster.

Code details and examples: 

Code: 

To illustrate the usage of this software let's take a simple MPI code which finds the maximum number in a list.(max.c)

```C
#include <stdio.h>
#include "mpi.h"
#define MAX_LIST 10000

int main(int argc, char **argv){

 int rank, total_ranks;
 int global_max = 0;
 int local_max = 0;

 int i;
 int locals[MAX_LIST] = { 0 };
 MPI_Init(&argc, &argv);
 MPI_Comm_rank(MPI_COMM_WORLD, &rank);
 MPI_Comm_size(MPI_COMM_WORLD, &total_ranks);

 for(i=0;i<MAX_LIST;i++)
 {
    locals[i] = rank * MAX_LIST + i;
 }

 for(i=0;i<MAX_LIST;i++)
 {
  if(locals[i] > local_max)
     local_max = locals[i];
 }

 MPI_Reduce(&local_max, &global_max, 1, MPI_INT, MPI_MAX, 0,MPI_COMM_WORLD);

 if(rank==0)
 {
    printf("Maximum value = %d\n", global_max);
 }

 MPI_Finalize();
 return 0;
}
```
To compile this code you would use:

`mpicc -o max max.c`

After this, to run the Max program (compiled above) on your cluster via MVAPICH2, the general format for the command is:

`mpirun -np 4 ./max`

Here, `-np` denotes the number of processes and `4` implies we wish to run this program using 4 processes. You may want to adjust this number according to the architecture of the cluster you are working on. 

Files required: Input files are not necessary for this example as we are generating an array of integers based on the rank of each process.

Specifications and details in input files: N/A. 

There will not be any input files provided as we are generating data based on the rank of each process. 

It is important to mention that MVAPICH2 is designed to work with the Message Passing Interface (MPI) standard which is widely used for writing parallel programs. This standard provides a library of functions that allow communication between distributed processes, essential for running parallel programs in a cluster, but also useful for multiprocessor systems. The MPI library is available in C, C++, and Fortran.