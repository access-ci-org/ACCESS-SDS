Use Case: Use FFTW3 for computing complex to complex Fast Fourier Transform.

Code details and examples: 
Code: 

    	
```C++
#include <complex>
#include <fftw3.h>
 
const ptrdiff_t N0 = 10, N1 = 10;
 
int main()
{
    fftw_complex *data, *fft_result;
    fftw_plan plan_forward, plan_backward;
    ptrdiff_t alloc_local, local_n0, local_0_start, i, j;
 
    alloc_local = fftw_mpi_local_size_2d(N0, N1, MPI_COMM_WORLD,
                                         &local_n0, &local_0_start);
 
    data = fftw_alloc_complex(alloc_local);
    fft_result = fftw_alloc_complex(alloc_local);
 
    plan_forward = fftw_mpi_plan_dft_2d(N0, N1, data, fft_result,
                                        MPI_COMM_WORLD, FFTW_FORWARD, FFTW_ESTIMATE);
 
    plan_backward = fftw_mpi_plan_dft_2d(N0, N1, fft_result, data,
                                         MPI_COMM_WORLD, FFTW_BACKWARD, FFTW_ESTIMATE);
 
    for (i = 0; i < local_n0; ++i) 
      for (j = 0; j < N1; ++j)
        data[i*N1 + j][0] = i*N1 + j,
        data[i*N1 + j][1] = 0;

    fftw_execute(plan_forward);
    fftw_execute(plan_backward);
 
    fftw_destroy_plan(plan_forward);
    fftw_destroy_plan(plan_backward);
    fftw_free(data); fftw_free(fft_result);
}
```

The above code computes the 2D complex-to-complex FFT. In the above code, `N0` and `N1` are dimensions of the problem, `alloc_local` is the size of the local data, `local_n0` is the number of rows, `local_0_start` is starting row of the process, `data` is input memory block, `fft_result` is the output of FFT.

In order to compile and run the FFTW program, you can use 

`mpic++ -o fft mpi_fft.cpp -lfftw3_mpi -lfftw3 -lm`

`mpirun -np 4 ./fft`

The sample data is generated within the code itself for simplicity. Itâ€™s a simple pattern where each element is `i*N1 + j`.
