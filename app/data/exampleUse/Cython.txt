Use Case: Cython is widely used for wrapping external C libraries, optimizing hotspots in the running Python code, and for fast C extensions for Python projects. It acts as a bridge between Python and C/C++ and allows you to write C extensions in an easier way.

Code details and examples: 
Code:

Consider a `.pyx` file, `hello.pyx` with the following content:

```python
def hello(name):
    print("Hello %s!" % name)
```

Next, create a `setup.py` file:

```python
from setuptools import setup
from Cython.Build import cythonize

setup(
    name='Hello Cython world',
    ext_modules=cythonize("hello.pyx"),
    zip_safe=False,
)
```

The command to compile the Cython code is:

```bash
python setup.py build_ext --inplace
```

The compiled Cython code can be run as usual Python code:

```bash
python -c 'import hello; hello.hello("world")'
```

This will produce the output `Hello world!`

Data formats: Cython itself doesn't have any intrinsic "data format." The data formats it works with depend on what code is being implemented or what code it is interfacing with. It can interact with anything that C and Python can. In this example, the input data format is a string (a name in the function hello).

Specifications in input files: There are no unique specifications in a Cython '.pyx' file. It typically contains python code with optional additional Cython-specific extensions. The main specification is to be correctly formatted according to the Python/Cython syntax (i.e., all parentheses, brackets, and indentations must align correctly). 

However, in setup.py, you will have to specify the python package Cython, the name of the module you want to compile, and use Cython's `cythonize` function to turn your python script into C code. All these pieces are necessary for Cython to successfully compile your Python code into C code.