Use Case: Debugging a C++ program that crashes during runtime.

Code details and examples:

Code:

The file with C++ code (buggy_code.cpp):

```cpp
#include <vector>

int main() {
    std::vector<int> numbers;
    numbers[0] = 1;  // This line will cause a crash.
    return 0;
}
```
Command to compile with debugging information: `g++ -g buggy_code.cpp -o buggy_code`

Usage of GDB:

First, start the debugger with the program:

`gdb buggy_code`

At the GDB prompt, run the program:

`(gdb) run`

After the crash, you can inspect the state of the program. For example, to see the line that caused the crash, enter: 

`(gdb) where`

You can also inspect variables. For example, to print the value of the variable `numbers`, enter:

`(gdb) print numbers`

To quit GDB, enter:

`(gdb) quit`

Please replace the command 'buggy_code' with your respective filename where required. Above lines of code may not work if you do not replace 'buggy_code' with your filename.

Remember, this is a simple example. GNU Debugger (gdb) is a powerful tool with many features for debugging. It supports programming languages like C, C++, Rust, Go, etc. It allows you to inspect what the program is doing at a certain point during execution.