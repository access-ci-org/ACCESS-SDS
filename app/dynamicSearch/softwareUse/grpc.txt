Use Case: Use gRPC to establish remote procedure calls (RPCs) between client and server applications.

Code details and examples:

Code:

Python gRPC client example:
```python
import grpc
import helloworld_pb2
import helloworld_pb2_grpc

def run():
   channel = grpc.insecure_channel('localhost:50051')
   stub = helloworld_pb2_grpc.GreeterStub(channel)
   response = stub.SayHello(helloworld_pb2.HelloRequest(name='your name'))
   print("Greeter client received: " + response.message)

if __name__ == '__main__':
    run()
```

Here we are creating a python client to connect to a gRPC server. Here 'helloworld_pb2' is the Python file generated by the Protocol Buffers compiler from 'helloworld.proto'.

Python gRPC server example:
```python
from concurrent import futures
import time

import grpc

import helloworld_pb2
import helloworld_pb2_grpc

class Greeter(helloworld_pb2_grpc.GreeterServicer):
   def SayHello(self, request, context):
       return helloworld_pb2.HelloReply(message='Hello, %s!' % request.name)

def serve():
   server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))
   helloworld_pb2_grpc.add_GreeterServicer_to_server(Greeter(), server)
   server.add_insecure_port('[::]:50051')
   server.start()
   try:
       while True:
           time.sleep(86400)
   except KeyboardInterrupt:
       server.stop(0)

if __name__ == '__main__':
    serve()
```

In the server example, we have a Greeter service that implements the SayHello function. Here 'helloworld.proto' file is needed which describes the service.

Command to run them:
- Run the server script: `python server_script.py`
- Run the client script: `python client_script.py`