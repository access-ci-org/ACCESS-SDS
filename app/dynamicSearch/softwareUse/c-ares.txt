Use Case: c-ares is an asynchronous resolver library and is used when you want to perform DNS operations including host lookups, IP address conversions etc.

Code Details and Examples: Code

Example.h:

```cpp
#include <ares.h>
#include <ares_dns.h>

void callback(void * arg, int status, int timeouts, struct hostent * host);
```

Example.c:

```cpp
#include "example.h"
#include <stdio.h>

void callback(void * arg, int status, int timeouts, struct hostent * host) {
    if (status != ARES_SUCCESS){
        fprintf(stderr, "DNS lookup failed: %s\n", ares_strerror(status));
        return;
    }
    char ip[INET6_ADDRSTRLEN];
    int idx;
    for (idx = 0; host->h_addr_list[idx]; ++idx){
        inet_ntop(host->h_addrtype, host->h_addr_list[idx], ip, sizeof(ip));
        printf("Found address: %s\n", ip);
    }
}

int main(int argc, char * argv[]) {
    ares_channel channel;
    int status = ares_library_init(ARES_LIB_INIT_ALL);
    if (status != ARES_SUCCESS){
        fprintf(stderr, "ares_library_init: %s\n", ares_strerror(status));
        return 1;
    }

    struct ares_options options;
    int optmask = 0;
    ares_library_cleanup();

    status = ares_init_options(&channel, &options, optmask);
    if(status != ARES_SUCCESS){
        fprintf(stderr, "ares_init_options: %s\n", ares_strerror(status));
        return 1;
    }

    ares_gethostbyname(channel, "www.example.com", AF_INET, callback, NULL);
    while(1) {
        struct timeval *tvp, tv;
        fd_set read_fds, write_fds;
        int nfds;
        FD_ZERO(&read_fds);
        FD_ZERO(&write_fds);
        nfds = ares_fds(channel, &read_fds, &write_fds);
        if(nfds == 0)
            break;
        tvp = ares_timeout(channel, NULL, &tv);
        select(nfds, &read_fds, &write_fds, NULL, tvp);
        ares_process(channel, &read_fds, &write_fds);
    }
    ares_destroy(channel);
    ares_library_cleanup();
    return 0;
}
```

To compile the code use:

```bash
gcc example.c -lcares -o dnslookup
```

Then, to run the code:

```bash
./dnslookup
```