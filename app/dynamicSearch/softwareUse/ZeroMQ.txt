Use Case: ZeroMQ is used for high-speed, low-latency communication between distributed and/or concurrent applications. It supports multiple types of exchange patterns, such as request–reply and publish–subscribe.

Code details and examples:

Code:

A simple request and reply pattern in Python using `pyzmq`, the Python binding for ZeroMQ.

Server side code:

```python
import zmq
import time
context = zmq.Context()
socket = context.socket(zmq.REP)
socket.bind("tcp://*:5555")
while True:
    #  Wait for next request from client
    message = socket.recv()
    print("Received request: %s" % message)
    #  Do some 'work'
    time.sleep(1)
    #  Send reply back to client
    socket.send(b"World")
```

Client side code:

```python
import zmq
context = zmq.Context()
print("Connecting to hello world server...")
socket = context.socket(zmq.REQ)
socket.connect("tcp://localhost:5555")
for request in range(10):
    print("Sending request %s ..." % request)
    socket.send(b"Hello")
    message = socket.recv()
    print("Received reply %s [ %s ]" % (request, message))
```

To run the server, use the command: `python server.py`

To run the client, use the command: `python client.py` 

The input here is a hardcoded string "Hello". The server receives this string, waits for a second and then responds with the string "World"