Use Case: Use GStreamer for video processing which includes reading from a video source, processing it and then sending it to a video sink. 

Code details and examples: Code

GStreamer uses a pipeline based model for video processing. The pipeline includes various elements like source, codecs, filters and sink which are connected in a specific order. 

Here is an example of a command line pipeline to play a video file using GStreamer:

```bash
gst-launch-1.0 filesrc location=/path/to/video.mp4 ! decodebin ! videoconvert ! autovideosink
```

In this pipeline:

- `filesrc location=/path/to/video.mp4` is the source element which reads from the specified video file. 

- `decodebin` is the decoder element which decodes the video stream. 

- `videoconvert` is the filter element which converts the video format to a format suitable for the video sink. 

- `autovideosink` is the sink element which sends the video stream to a suitable video output. 

You can also create a pipeline in Python using GStreamer's Python bindings:

```python
import gi
gi.require_version('Gst', '1.0')
from gi.repository import Gst, GObject

Gst.init(None)

pipeline = Gst.Pipeline.new("mypipeline")

filesrc = Gst.ElementFactory.make("filesrc", "source")
filesrc.set_property("location", "/path/to/video.mp4")

decodebin = Gst.ElementFactory.make("decodebin", "decoder")

videoconvert = Gst.ElementFactory.make("videoconvert", "converter")

autovideosink = Gst.ElementFactory.make("autovideosink", "output")

pipeline.add(filesrc)
pipeline.add(decodebin)
pipeline.add(videoconvert)
pipeline.add(autovideosink)

filesrc.link(decodebin)
decodebin.link(videoconvert)
videoconvert.link(autovideosink)

pipeline.set_state(Gst.State.PLAYING)

GObject.threads_init()
Gst.debug_set_active(True)
Gst.debug_set_default_threshold(3)

GObject.MainLoop().run()
```
In this python script:

- We first import the required modules and initialization of GStreamer library.

- Then we create a new Pipeline.

- We create elements for filesrc, decodebin, videoconvert and autovideosink using `Gst.ElementFactory.make`.

- Then we add these elements to the pipeline using `pipeline.add()`.

- And finally, we link these elements using `.link()` method and set the pipeline to PLAYING state.