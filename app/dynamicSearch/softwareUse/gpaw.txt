Use Case: GPAW is a Python-based Plane-Wave Density-Functional Theory code used in the quantification and analysis of the electronic structure of many-electron systems.

Code Details and Examples:

Code: 

```
# Import necessary module
from gpaw import GPAW, PW

# Define computational parameters
parameters = {'mode': PW(600),
              'xc': 'PBE',
              'kpts': (8, 8, 8),
              'parallel': {'band': 1},
              'occupations': {'name': 'fermi-dirac', 'width': 0.05}}

# Define structure (e.g., diamond)
from ase.build import bulk
structure = bulk('C', 'diamond')

# Set calculator with parameters defined
structure.set_calculator(GPAW(**parameters))

# Perform single point calculation
structure.get_potential_energy()

# Save results
structure.calc.write('diamond.gpw', 'all')
```

Command to run: 

```
$ gpaw python diamond.py
```

Input file format: The input to GPAW is a Python script with embedded parameters and computational details, such as the test case 'diamond.py' created above.

Specifications and detail in input files: The Python script file as input should contain the definition of the chemical system, the computational parameters such as exchange-correlation functional, the type of basis set, the computational mode, k-points, etc., and necessary computational steps (e.g., single point calculation, geometry optimization, etc.).
  
Output file format: The output file ('diamond.gpw') is in binary format which contains all the required data from the run, including the wave functions. This file can be later read by GPAW for further computations or by other computational tools for analysis.