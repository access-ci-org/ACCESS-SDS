Use Case: Analyzing Big Data in a High-Performance Computing (HPC) environment using Hadoop.

Code details and examples:
Code:

````
//Java
import java.io.IOException;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Mapper;

public class WordCountMapper extends Mapper<LongWritable, Text, Text, IntWritable> {
private final static IntWritable one = new IntWritable(1);
private Text word = new Text();

public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
    String[] words = value.toString().split("\\s+");
    for (String s : words) {
            word.set(s);
            context.write(word, one);
        }
    }
}
````
This is a MapReduce implementation in Hadoop for word count. It takes an input file containing sentences.
Input file:

````
Hello World
Hello Hadoop
Goodbye World
````
Command to run it (assuming Hadoop is installed and configured):

````
$ hadoop jar wordcount.jar WordCount inputfile outputfile
````

This command takes `inputfile` as the input data and writes the output i.e., the word count, into `outputfile`.

Use Case: Solving complex mathematical computations using NumPy, a Python library.

Code details and examples:
Code:

````
#Python
import numpy as np

A = np.array([[1, 2], [3, 4]])
B = np.array([[5, 6], [7, 8]])

# Performing matrix multiplication
M = np.dot(A, B)
print('Matrix Multiplication Result:\n', M)
````
Input: 
This code snippet does not take a file as input but uses hard-coded 2D arrays (matrices).
Command to run it:

````
$ python3 matrix_mul.py
````

Use Case: Molecular dynamics simulations using GROMACS, a computational chemistry package.

Code details and examples:
Command:

````
$ gmx mdrun -v -deffnm my_sim
````
This command performs a molecular dynamics simulation on the system defined in the input files. The `-v` option is for verbose output, and `-deffnm` specifies the basename of the input and output files.

Input files:
`my_sim.tpr` - binary input file generated by the `grompp` program
`my_sim.edr` - energy file
`my_sim.log` - log file
`my_sim.gro` - final structure file