Use Case: This library converts from one character encoding to another, through Unicode conversion. It supports a wide variety of encodings. 

Code details and examples:

Code:
Here is an example where libiconv is used in a C program:
```C
#include <iconv.h>

int main() {
    iconv_t conv = iconv_open("WCHAR_T", "UTF-8");
    char utf8_string[] = "Hello, World!";
    char utf32_string[50] = {0};
    char *inbuf = utf8_string;
    char *outbuf = utf32_string;
    size_t inbytesleft = sizeof(utf8_string);
    size_t outbytesleft = sizeof(utf32_string);
    iconv(conv, &inbuf, &inbytesleft, &outbuf, &outbytesleft);
    iconv_close(conv);
    return 0;
}
```
This C program converts a string from UTF-8 to UTF-32 using libiconvâ€™s API. After running the program, the UTF-32 encoded string will be stored in `utf32_string`.

This program does not require an input file. It will convert the hardcoded string "Hello, World!" from UTF-8 to UTF-32. It does not have a command to run it. It must be compiled and run as a C program. Compiling and running a C program depends on your development environment.