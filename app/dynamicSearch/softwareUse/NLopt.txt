Use Case: NLopt is a free/open-source library for nonlinear optimization, providing a common interface for a number of different free optimization routines available online as well as original implementations of various other algorithms. It is majorly used for solving nonlinear optimization problems where the objective function is some kind of smoothish nonlinear function.

Code details and examples:

Code: In this example, we will use Python binding of NLopt to solve a simple optimization problem which is minimize the function f(x,y)=x^2+y^2 with the constraint that x+y>=-1.

```python
import nlopt
from numpy import *

# objective function.
def myfunc(x, grad):
    if grad.size > 0:
        grad[0] = 0.0
        grad[1] = 0.5 / sqrt(x[1])
    return sqrt(x[1])

# define equal constraint
def myconstraint(x, grad, a, b):
    if grad.size > 0:
        grad[0] = 3 * a * (a*x[0] + b)**2
        grad[1] = -1.0
    return (a*x[0] + b)**3 - x[1]

# create a new optimization problem
opt = nlopt.opt(nlopt.LD_MMA, 2)
opt.set_lower_bounds([-float('inf'), 0])
opt.set_min_objective(myfunc)
opt.add_inequality_constraint(lambda x,grad: myconstraint(x,grad,2,0), 1e-8)
opt.add_inequality_constraint(lambda x,grad: myconstraint(x,grad,-1,1), 1e-8)
opt.set_xtol_rel(1e-4)

# solve the optimization problem and print the optimal solution
x = opt.optimize([1.234, 5.678])
print("optimal x:", x)
```

Command to run: The python script can be run using the following command:

```
python script_name.py
```