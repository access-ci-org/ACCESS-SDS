Use Case: Dakota (Design Analysis Kit for Optimization and Terascale Applications) is a software toolkit providing a flexible interface for optimization, sensitivity analysis, uncertainty analysis, and design of experiments.

Code details and examples:

Code:

```python
# Dakota input file (dakota.in)

method,
  id_method = 'optim'
  model_pointer = 'model1'
  optimization
    max_function_evaluations = 200
    convergence_tolerance = 1.e-4
variables,
  continuous_design = 2
    initial_point  0.5 1.5
    lower_bounds  -5  -5
    upper_bounds   5   5
interface,
  id_interface = 'rosenbrock'
  fork
    analysis_driver = 'rosenbrock'
model,
  id_model = 'model1'
  single
    variables_pointer = 'optim'
    interface_pointer = 'rosenbrock'

# Python function for rosenbrock evaluation (rosenbrock.py)

from dakota.interfacing import DirectApplicInterface
import sys
import numpy as np

class Rosenbrock(DirectApplicInterface):

    def evaluate(self, vars, controls, response):
        x = np.array(vars["continuous_design"])
        y = np.sum(100.0*(x[1:] - x[:-1]**2.0)**2.0 + (1 - x[:-1])**2.0)
        response["objective_function"] = y

if __name__ == "__main__":
    Rosenbrock().run(sys.argv[1])
```

To run a Dakota analysis, use the Dakota command followed by the name of the input file. Here's an example:

```bash
dakota -i dakota.in -o dakota.out
```