Use Case: Use imbalanced-learn, a Python library that comes handy when handling imbalanced datasets. It provides many methods to undersample, oversample or combine both methods to balance the dataset.

Code details and examples: Code:

Python libraries needed:
```python
from sklearn.datasets import load_balloons
from imblearn.under_sampling import RandomUnderSampler
from collections import Counter
```

Sample input files, format: No separate file inputs required. The dataset is fetched with sklearn's load_balloons function, and imblearn is used to balance the dataset.

Specifications: The dataset that loads from load_balloons function is dictionary-like object. The interesting attributes are: data, the data to learn, target, the classification labels, and target_names, the meaning of the labels. 

Code Snippet: This script undersamples the majority class using imblearn's RandomUnderSampler.

```python
# load balloon dataset
X, y = load_balloons(return_X_y=True)
print('Original dataset shape %s' % Counter(y))
 
# apply the random under-sampling
rus = RandomUnderSampler(random_state=42)
X_res, y_res = rus.fit_resample(X, y)
print('Resampled dataset shape %s' % Counter(y_res))

```

How to run: This script can be run in a python environment. Simply copy and paste the code into your python environment and run it. The outputs are the counts of each class before and after resampling. 

There are no specific file requirements for imbalanced-learn. It accepts pandas DataFrame, numpy array, scipy sparse matrices as inputs for X (predictors) and array-like forms for y (target). It automatically handles the file formats underneath and does the required transformations. The module therefore integrates well with sklearn's modules (like the load_balloons function in example), and usually we can fetch the dataset with a single line command from sklearn and input this to imbalanced-learn's functions.