Use Case: gettext is a package providing internationalization (i18n) and localization (l10n) support in software applications. It helps to translate the program messages into multiple languages. For example, assume we have an original English message in a software, gettext helps to translate that into different languages as per the user's choice. 

Code details and examples:  

Consider a simple HelloWorld program in python, which we need to provide multilingual support using gettext.

Code:

```python
import gettext
gettext.bindtextdomain('myapplication', '/path/to/my/language/directory')
gettext.textdomain('myapplication')
_ = gettext.gettext
# now you can use _("message") to get the localized string
print(_("Hello, World!"))
```

In this code snippet, 'myapplication' is the name of your application, '/path/to/my/language/directory' is the directory containing the .mo files (compiled translation files). 

To enable translation for a new language, you'll need two files in the language directory: a .po (Portable Object) file and a .mo (Machine Object) file. You should name these files after your application and the locale. For example, for a German translation, they would be myapplication.de.po and myapplication.de.mo.

A minimal .po file for the above Python script is:

```
msgid ""
msgstr ""
"Content-Type: text/plain; charset=UTF-8\n"

msgid "Hello, World!"
msgstr "Hallo, Welt!"
```

To compile this .po file into a .mo file, you can use the msgfmt tool, provided with gettext:

```
msgfmt -o myapplication.de.mo myapplication.de.po
```

Now, when a German user runs your script, they would see "Hallo, Welt!" instead of "Hello, World!".