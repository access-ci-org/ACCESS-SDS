Use Case: Bison is a general-purpose parser generator that converts a grammar description for an LALR(1) context-free grammar into a C program to parse that grammar. 

Code details and examples:

Input File Format:
The grammar written in bison input file contains rules and actions in C-style syntax:

```
%{
#include <stdio.h>
%}

%token INTEGER

%%
program:
         program statement '\n'
         |
         ;

statement:
         INTEGER            { printf("%d\n", $1); }
         ;
%%
```

This grammar describes simple calculator program that takes integers line by line and prints it.

Command to Run:
The command to generate parser C code is: 
```
bison -d grammar.y
```

It will generate 'grammar.tab.c' and 'grammar.tab.h'. 

Code Snippet:

To use generated parser you need to write a code that feeds lexer. Here is the simple example:

```
#include "grammar.tab.h"

extern int yylex();
extern int yyparse();
extern FILE *yyin;
 
int main(void)
{
  yyin = fopen("file", "r");
  if (!yyin) return -1;

  yyparse();      
}
```

This program opens a file, starts parser that calls lexer (yylex function) to get tokens.

Command to compile the code:
```
gcc program.c grammar.tab.c -o program
```