Use Case: Google's Protocol Buffers (protobuf) is a powerful tool that allows for the creation of flexible, efficient, and automated solutions for serializing structured data â€“ think XML, but smaller, faster, and simpler. It is used to encode data for communication over the wire and for storage, e.g. in files or in databases.

Code details and examples: Code

Protobuf Structure File:
A .proto file describes the structure of the objects that we want to serialize. Consider the following file called 'addressbook.proto':

```
syntax = "proto3";
package tutorial;

message Person {
  string name = 1;
  int32 id = 2;
  string email = 3;

  enum PhoneType {
    MOBILE = 0;
    HOME = 1;
    WORK = 2;
  }

  message PhoneNumber {
    string number = 1;
    PhoneType type = 2;
  }

  repeated PhoneNumber phones = 4;
}

message AddressBook {
  repeated Person people = 1;
}
```

This file describes a Person who has an Id, Name, Email and a list of PhoneNumber each containing Number and PhoneType, all these together form an Addressbook, which contains a list of such Persons.

Python Code Sample:
To use it with Python, after installing the protobuf compiler and generating Python code from .proto file, use the following code:

```python
import addressbook_pb2

def create_address_book_message():
    # Instantiate the outer message
    address_book = addressbook_pb2.AddressBook()

    # Create a new person
    person = address_book.people.add()
    person.id = 1
    person.name = "John Doe"
    person.email = "jdoe@example.com"

    phone = person.phones.add()
    phone.number = "555-4321"
    phone.type = addressbook_pb2.Person.HOME

    return address_book

def write_and_read_message():
    # Create a new message
    message = create_address_book_message()

    # Serialize the message to a binary string
    serialized_message = message.SerializeToString()

    # Must instantiate a new message because previous message is in undefined
    # state after serialization
    new_message = addressbook_pb2.AddressBook()

    # Deserialize the binary string to a new message
    new_message.ParseFromString(serialized_message)

    # Print the newly constructed message
    print(new_message)
``` 

Command to Run:
```shell
python3 protobuf_sample.py
``` 

Note: Make sure you have compiled the .proto file using protobuf compiler (protoc) to generate Python specific classes. The above python class uses these classes for serialization and deserialization. Refer to protobuf compiler (protoc) documentation on how to generate class files.