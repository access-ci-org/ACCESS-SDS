Use Case: The R package GenomeInfoDb is extensively used in a wide range of fields like bioinformatics, genomics, and genetics. Its primary purpose is to offer efficient containers for storing and handling genome-level data. 

Code Details and Examples:

Code: 

```
# Load the GenomeInfoDb package
library(GenomeInfoDb)

# Create a GRanges object
gr <- GRanges(seqnames = Rle(c('chr1', 'chr2'), c(3, 2)), 
              ranges = IRanges(1:5, width = 1), 
              strand = Rle(strand(c('+', '-', '*')), c(1, 2, 2)), 
              width = c(10, 10, 10, 20, 20))

# Inspect the GRanges object
gr
```

Input files: No input files are required for the above code.

Output:
```
GRanges object with 5 ranges and 1 metadata column:
       seqnames    ranges strand |     width
          <Rle> <IRanges>  <Rle> | <integer>
   [1]     chr1       1+      + |        10
   [2]     chr1       2+      - |        10
   [3]     chr1       3+      - |        10
   [4]     chr2       4+      * |        20
   [5]     chr2       5+      * |        20

# Applying genome-level operations:
seqinfo(gr)

Seqinfo object with 2 sequences:
  seqnames seqlengths isCircular genome
1     chr1         NA       <NA>   <NA>
2     chr2         NA       <NA>   <NA>

```

Command to run it:

To run R code you can simply paste it in the console of the RStudio or any similar IDE. For running it via the command line, you can save the code into a file (example.R) and then from the command line you can use Rscript command:

```
Rscript example.R
```

This will run the R code written in the 'example.R' file. Note that for the command to work, the path to the Rscript must be defined in the system's PATH variable.