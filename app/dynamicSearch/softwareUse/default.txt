Use Case: MPI (Message Passing Interface) usage for parallel computing in scientific research 

Code details and examples: Code

Input file format: usually a text or binary file with data for processing depends on what the program is designed to do.

Example input file (test.txt):

```
Hello MPI
Hello MPI
Hello MPI
```

Sample MPI program (in C++): test_mpi.cpp
```cpp
#include <mpi.h>
#include <iostream>
#include <fstream>

int main(int argc, char **argv) {
    MPI_Init(&argc, &argv);

    int rank;
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);

    std::ifstream file("test.txt");
    if (file.is_open()) {
        std::string line;
        while (getline(file, line)) {
            std::cout << "Process " << rank << " reads: " << line << std::endl;
        }
        file.close();
    }

    MPI_Finalize();
    return 0;
}
```

Compile using mpicxx:
```bash
mpicxx -o test_mpi test_mpi.cpp
```

Run using mpirun:
```bash
mpirun -np 4 ./test_mpi
```
Here, "-np 4" launches 4 MPI processes.

Use Case: BioPython usage for parsing biological data files

Code details and examples: Code

BioPython Library: a python library for bioinformatics tasks such as parsing and analyzing sequence data.

Input file format: usually FASTA or GenBank, depending on the specific bioinformatics task.

Example input file (test.fasta):

```
>Sequence1
ATGCATGCATGCATGC
>Sequence2
ATGCATGCATGCATGC
```

Sample Python script using BioPython: test_bio.py
```python
from Bio import SeqIO

for record in SeqIO.parse("test.fasta", "fasta"):
    print("ID:", record.id)
    print("Sequence:", record.seq)
    print("Length:", len(record))
```
Command to run it:
```bash
python test_bio.py
```

Use Case: Numba usage for speeding up numerical computations in Python  

Code details and examples: Code

Numba package: a just-in-time compiler for Python for numerical functions

Input: Usually an array of numerical data.

Example Python script using Numba: test_numba.py
```python
import numpy as np
from numba import jit

@jit(nopython=True)
def sum2d(arr):
    M, N = arr.shape
    result = 0.0
    for i in range(M):
        for j in range(N):
            result += arr[i,j]
    return result

data = np.arange(10000).reshape(100, 100)
print(sum2d(data))
```
Command to run it:
```bash
python test_numba.py
```
The command takes no input files. The "data" within the script is generated by the script itself. The output is the sum of all numbers in the created array.