Use Case: Use AWS Lambda to execute code in response to triggers such as changes to data in an Amazon S3 bucket, modifications in a DynamoDB table, or custom events generated by applications or services.

Code details and examples: Code

Input File Format: JSON

Sample Input (Event Object):
```
{
  "Records": [
    {
      "eventVersion": "2.1",
      "eventSource": "aws:s3",
      "awsRegion": "us-west-2",
      "eventTime": "The time, in ISO-8601 format, when S3 finished processing the request",
      "eventName": "ObjectCreated:Put",
      "userIdentity": {},
      "requestParameters": {},
      "responseElements": {},
      "s3": {}
    }
  ]
}
```
Code Snippet (Python):
```
import json

def lambda_handler(event, context):
    # process the S3 PUT event
    for record in event['Records']:
        if record['eventName'] == 'ObjectCreated:Put':
            print(f"New object has been created in the bucket: {record['s3']['bucket']['name']}")
    
    # return the number of processed events
    return {
        'statusCode': 200,
        'body:': json.dumps(f"Successfully processed {len(event['Records'])} events.")
    }
```
Running Command:
AWS Lambda functions are executed in response to event triggers. So there's no direct command to run them. But we can use boto3, the AWS SDK for Python, to invoke the function manually.
```
boto3.client('lambda').invoke(
  FunctionName='myFunctionName',
  InvocationType='Event',
  Payload=json.dumps(event)
)
```